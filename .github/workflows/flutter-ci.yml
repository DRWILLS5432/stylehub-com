name: Flutter CI

on: [push, pull_request]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: stable
          architecture: x64

      - name: Install dependencies
        run: |
          flutter pub add intl:^0.20.2
          flutter pub get

      - name: Create analysis options
        run: |
          echo "analyzer:" > analysis_options.yaml
          echo "  errors:" >> analysis_options.yaml
          echo "    argument_type_not_assignable: ignore" >> analysis_options.yaml
          echo "    missing_assignable_selector: ignore" >> analysis_options.yaml
          echo "    undefined_operator: ignore" >> analysis_options.yaml
          echo "    equality_cannot_be_equality_operand: ignore" >> analysis_options.yaml
          echo "    undefined_identifier: ignore" >> analysis_options.yaml

      - name: Run Flutter analyze and capture output
        run: |
          flutter analyze --no-fatal-infos --no-fatal-warnings > analyze_output.txt || true
          flutter analyze --no-fatal-infos --no-fatal-warnings --write=analysis.json || true
          echo "Raw analyze output:"
          cat analyze_output.txt || echo "analyze_output.txt is empty"
          echo "analysis.json:"
          cat analysis.json || echo "analysis.json is empty or invalid"

      - name: Generate HTML report
        run: |
          cat << 'EOF' > generate_report.dart
          import 'dart:convert';
          import 'dart:io';

          void main() {
            try {
              // Try to parse analysis.json
              List issues = [];
              final jsonFile = File('analysis.json');
              if (jsonFile.existsSync()) {
                final jsonString = jsonFile.readAsStringSync().trim();
                if (jsonString.isNotEmpty && jsonString.startsWith('{')) {
                  try {
                    final jsonData = jsonDecode(jsonString);
                    issues = jsonData['issues'] as List? ?? [];
                  } catch (e) {
                    print('Failed to parse analysis.json: $e');
                  }
                } else {
                  print('Invalid or empty JSON in analysis.json: $jsonString');
                }
              }

              // If no issues from JSON, parse raw analyze output
              if (issues.isEmpty) {
                final rawOutput = File('analyze_output.txt').readAsStringSync();
                final issueLines = rawOutput.split('\n').where((line) => line.contains(' ‚Ä¢ ')).toList();
                for (var line in issueLines) {
                  final parts = line.split(' ‚Ä¢ ');
                  if (parts.length >= 4) {
                    final severity = parts[0].trim().toLowerCase();
                    final message = parts[1].trim();
                    final location = parts[2].trim();
                    final code = parts[3].trim();
                    final locationParts = location.split(':');
                    final file = locationParts[0];
                    final lineNum = locationParts.length > 1 ? locationParts[1] : '0';
                    issues.add({
                      'severity': severity,
                      'message': message,
                      'location': {'file': file, 'startLine': lineNum},
                      'code': code,
                    });
                  }
                }
                print('Parsed ${issues.length} issues from raw output');
              }

              // Count issues by severity for chart
              final errorCount = issues.where((elem) => elem['severity'] == 'error').length;
              final warningCount = issues.where((elem) => elem['severity'] == 'warning').length;
              final infoCount = issues.where((elem) => elem['severity'] == 'info').length;

              // Count lines of code and detect languages
              final libDir = Directory('lib');
              var totalLines = 0;
              final languages = <String, int>{};
              if (libDir.existsSync()) {
                libDir.listSync(recursive: true).forEach((entity) {
                  if (entity is File && !entity.path.contains('/generated/')) {
                    final extension = entity.path.split('.').last.toLowerCase();
                    final lines = entity.readAsLinesSync().length;
                    totalLines += lines;
                    final lang = extension == 'dart' ? 'Dart' : extension == 'yaml' ? 'YAML' : extension == 'json' ? 'JSON' : 'Other';
                    languages[lang] = (languages[lang] ?? 0) + lines;
                  }
                });
              }

              // Generate HTML report
              final html = StringBuffer('''
              <!DOCTYPE html>
              <html lang="en">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>StyleHub Code Analysis Report</title>
                <script src="https://cdn.tailwindcss.com"></script>
                <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                <style>
                  body { background-color: #f9fafb; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
                  .summary { margin-bottom: 1.5rem; }
                  .content { display: flex; gap: 1.5rem; }
                  .table-container { flex: 1; }
                  .chart-container { width: 300px; height: 300px; }
                  table { width: 100%; border-collapse: collapse; background-color: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                  th, td { padding: 0.75rem; text-align: left; border-bottom: 1px solid #e5e7eb; }
                  th { background-color: #f3f4f6; font-size: 0.875rem; font-weight: 600; color: #374151; text-transform: uppercase; }
                  tr:hover { background-color: #f9fafb; }
                  .severity-icon { margin-right: 0.5rem; }
                  .error { color: #dc2626; }
                  .warning { color: #d97706; }
                  .info { color: #2563eb; }
                </style>
              </head>
              <body>
                <div class="container">
                  <h1 class="text-2xl font-bold text-gray-800 mb-6">StyleHub Code Analysis Report</h1>
                  <div class="summary bg-white p-4 rounded-lg shadow">
                    <p><strong>Total Issues:</strong> ${issues.length}</p>
                    <p><strong>Total Lines of Code:</strong> $totalLines</p>
                    <p><strong>Languages Used:</strong> ${languages.keys.join(', ')}</p>
                  </div>
                  <div class="content">
                    <div class="table-container">
                      <table>
                        <thead>
                          <tr>
                            <th>Severity</th>
                            <th>File</th>
                            <th>Line</th>
                            <th>Message</th>
                            <th>Code</th>
                          </tr>
                        </thead>
                        <tbody>
              ''');

              if (issues.isNotEmpty) {
                for (var issue in issues) {
                  final severity = issue['severity']?.toString().toLowerCase() ?? 'unknown';
                  final file = issue['location']?['file']?.toString() ?? 'unknown';
                  final line = issue['location']?['startLine']?.toString() ?? 'unknown';
                  final message = issue['message']?.toString() ?? 'No message';
                  final code = issue['code']?.toString() ?? 'unknown';
                  final icon = severity == 'error' ? 'üõë' : severity == 'warning' ? '‚ö†Ô∏è' : severity == 'info' ? '‚ÑπÔ∏è' : '';
                  final severityClass = severity == 'error' ? 'error' : severity == 'warning' ? 'warning' : severity == 'info' ? 'info' : '';
                  html.writeln('''
                          <tr>
                            <td><span class="severity-icon ${severityClass}">${icon}</span>${severity}</td>
                            <td>${file}</td>
                            <td>${line}</td>
                            <td>${message}</td>
                            <td>${code}</td>
                          </tr>
                  ''');
                }
              } else {
                html.writeln('<tr><td colspan="5" class="text-center text-gray-500">No analysis issues found.</td></tr>');
              }

              html.writeln('''
                        </tbody>
                      </table>
                    </div>
                    <div class="chart-container">
                      <canvas id="issueChart"></canvas>
                      <script>
                        const ctx = document.getElementById('issueChart').getContext('2d');
                        new Chart(ctx, {
                          type: 'pie',
                          data: {
                            labels: ['Errors', 'Warnings', 'Projects'],
                            datasets: [{
                              data: [${errorCount}, ${warningCount}, ${infoCount}],
                              backgroundColor: ['#dc2626', '#d97706', '#2563eb'],
                              borderColor: ['white', 'white', 'white'],
                              borderWidth: 2
                            }]
                          },
                          options: {
                            plugins: {
                              legend: {
                                position: 'bottom'
                              }
                            },
                            maintainAspectRatio: true
                          }
                        });
                      </script>
                    </div>
                  </div>
                </div>
              </body>
              </html>
              ''');
              Directory('analysis').createSync();
              File('analysis/index.html').writeAsStringSync(html.toString());
            } catch (e) {
              print('Error generating report: $e');
              Directory('analysis').createSync();
              File('analysis/index.html').writeAsStringSync('''
              <!DOCTYPE html>
              <html lang="en">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>StyleHub Code Analysis Report</title>
                <script src="https://cdn.tailwindcss.com"></script>
                <style>
                  body { background-color: #f9fafb; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
                </style>
              </head>
              <body>
                <div class="container">
                  <h1 class="text-2xl font-bold text-red-600 mb-6">Error generating report: $e</h1>
                </div>
              </body>
              </html>
              ''');
            }
          }
          EOF
          dart run generate_report.dart
          
      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: analysis-report
          path: analysis/
