name: Flutter CI

on: [push, pull_request]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: stable
          architecture: x64

      - name: Install dependencies
        run: |
          flutter pub add intl:^0.20.2
          flutter pub get

      - name: Create analysis options
        run: |
          echo "analyzer:" > analysis_options.yaml
          echo "  errors:" >> analysis_options.yaml
          echo "    argument_type_not_assignable: ignore" >> analysis_options.yaml
          echo "    missing_assignable_selector: ignore" >> analysis_options.yaml
          echo "    undefined_operator: ignore" >> analysis_options.yaml
          echo "    equality_cannot_be_equality_operand: ignore" >> analysis_options.yaml
          echo "    undefined_identifier: ignore" >> analysis_options.yaml

      - name: Run Flutter analyze and generate JSON output
        run: |
          flutter analyze --no-fatal-infos --no-fatal-warnings --write=analysis.json || true
          # Debug: Output analysis.json content to logs
          cat analysis.json || echo "analysis.json is empty or invalid"

      - name: Generate HTML report
        run: |
          cat << 'EOF' > generate_report.dart
          import 'dart:convert';
          import 'dart:io';

          void main() {
            try {
              // Read analysis.json
              final jsonFile = File('analysis.json');
              String jsonString = '';
              if (jsonFile.existsSync()) {
                jsonString = jsonFile.readAsStringSync().trim();
              }

              // Initialize issues list
              List issues = [];
              if (jsonString.isNotEmpty && jsonString.startsWith('{')) {
                try {
                  final jsonData = jsonDecode(jsonString);
                  issues = jsonData['issues'] as List? ?? [];
                } catch (e) {
                  print('Failed to parse JSON: $e');
                }
              } else {
                print('No valid JSON in analysis.json: $jsonString');
              }

              // Count lines of code and detect languages
              final libDir = Directory('lib');
              var totalLines = 0;
              final languages = <String, int>{};
              if (libDir.existsSync()) {
                libDir.listSync(recursive: true).forEach((entity) {
                  if (entity is File && !entity.path.contains('/generated/')) {
                    final extension = entity.path.split('.').last.toLowerCase();
                    final lines = entity.readAsLinesSync().length;
                    totalLines += lines;
                    final lang = extension == 'dart' ? 'Dart' : extension == 'yaml' ? 'YAML' : extension == 'json' ? 'JSON' : 'Other';
                    languages[lang] = (languages[lang] ?? 0) + lines;
                  }
                });
              }

              // Generate HTML report
              final html = StringBuffer('''
              <!DOCTYPE html>
              <html>
              <head>
                <title>StyleHub Analysis Report</title>
                <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  th { background-color: #f2f2f2; }
                  .error { color: red; }
                  .warning { color: orange; }
                  .info { color: blue; }
                  .summary { margin-bottom: 20px; }
                </style>
              </head>
              <body>
                <h1>StyleHub Code Analysis Report</h1>
                <div class="summary">
                  <p><strong>Total Issues:</strong> ${issues.length}</p>
                  <p><strong>Total Lines of Code:</strong> $totalLines</p>
                  <p><strong>Languages Used:</strong> ${languages.keys.join(', ')}</p>
                </div>
                <table>
                  <tr>
                    <th>Severity</th>
                    <th>File</th>
                    <th>Line</th>
                    <th>Message</th>
                    <th>Code</th>
                  </tr>
              ''');

              if (issues.isNotEmpty) {
                for (var issue in issues) {
                  final severity = issue['severity']?.toString().toLowerCase() ?? 'unknown';
                  final file = issue['location']?['file']?.toString() ?? 'unknown';
                  final line = issue['location']?['startLine']?.toString() ?? 'unknown';
                  final message = issue['message']?.toString() ?? 'No message';
                  final code = issue['code']?.toString() ?? 'unknown';
                  html.writeln('''
                    <tr class="$severity">
                      <td>$severity</td>
                      <td>$file</td>
                      <td>$line</td>
                      <td>$message</td>
                      <td>$code</td>
                    </tr>
                  ''');
                }
              } else {
                html.writeln('<tr><td colspan="5">No analysis issues found or invalid JSON output</td></tr>');
              }

              html.writeln('</table></body></html>');
              Directory('analysis-report').createSync();
              File('analysis-report/index.html').writeAsStringSync(html.toString());
            } catch (e) {
              print('Error generating report: $e');
              Directory('analysis-report').createSync();
              File('analysis-report/index.html').writeAsStringSync('''
              <!DOCTYPE html>
              <html>
              <head>
                <title>StyleHub Analysis Report</title>
                <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  h1 { color: red; }
                </style>
              </head>
              <body>
                <h1>Error generating report: $e</h1>
              </body>
              </html>
              ''');
            }
          }
          EOF
          dart run generate_report.dart

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: analysis-report
          path: analysis-report/
