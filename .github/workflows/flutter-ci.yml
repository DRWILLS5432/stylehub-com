name: Flutter CI

on: [push, pull_request]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: stable
          architecture: x64

      - name: Install dependencies
        run: |
          flutter pub add intl:^0.20.2
          flutter pub get

      - name: Create analysis options
        run: |
          echo "analyzer:" > analysis_options.yaml
          echo "  errors:" >> analysis_options.yaml
          echo "    argument_type_not_assignable: ignore" >> analysis_options.yaml
          echo "    missing_assignable_selector: ignore" >> analysis_options.yaml
          echo "    undefined_operator: ignore" >> analysis_options.yaml
          echo "    equality_cannot_be_equality_operand: ignore" >> analysis_options.yaml
          echo "    undefined_identifier: ignore" >> analysis_options.yaml

      - name: Run Flutter analyze and capture output
        run: |
          flutter analyze --no-fatal-infos --no-fatal-warnings > analyze_output.txt || true
          flutter analyze --no-fatal-infos --no-fatal-warnings --write=analysis.json || true

      - name: Generate HTML report
        run: |
          cat << 'EOF' > generate_report.dart
import 'dart:convert';
import 'dart:io';

void main() {
  try {
    List issues = [];

    final jsonFile = File('analysis.json');
    if (jsonFile.existsSync()) {
      final jsonString = jsonFile.readAsStringSync().trim();
      if (jsonString.isNotEmpty && jsonString.startsWith('{')) {
        try {
          final jsonData = jsonDecode(jsonString);
          issues = jsonData['issues'] as List? ?? [];
        } catch (_) {}
      }
    }

    if (issues.isEmpty) {
      final rawOutput = File('analyze_output.txt').readAsStringSync();
      final issueLines = rawOutput
          .split('\n')
          .where((line) =>
            line.contains(' ‚Ä¢ ') &&
            !line.toLowerCase().contains('analyzing '))
          .toList();

      for (var line in issueLines) {
        final parts = line.split(' ‚Ä¢ ');
        if (parts.length >= 4) {
          final severity = parts[0].trim().toLowerCase();
          final message = parts[1].trim();
          final location = parts[2].trim();
          final code = parts[3].trim();
          final locationParts = location.split(':');
          final file = locationParts[0];
          final lineNum = locationParts.length > 1 ? locationParts[1] : 'unknown';

          issues.add({
            'severity': severity,
            'message': message,
            'location': {'file': file, 'startLine': lineNum},
            'code': code,
          });
        }
      }
    }

    int errorCount = 0, warningCount = 0, infoCount = 0;
    for (var issue in issues) {
      final severity = (issue['severity'] ?? '').toString().toLowerCase();
      if (severity.contains('error')) errorCount++;
      else if (severity.contains('warning')) warningCount++;
      else if (severity.contains('info')) infoCount++;
    }

    final libDir = Directory('lib');
    var totalLines = 0;
    final languages = <String, int>{};
    if (libDir.existsSync()) {
      libDir.listSync(recursive: true).forEach((entity) {
        if (entity is File && !entity.path.contains('/generated/')) {
          final ext = entity.path.split('.').last.toLowerCase();
          final lines = entity.readAsLinesSync().length;
          totalLines += lines;
          final lang = ext == 'dart'
              ? 'Dart'
              : ext == 'yaml'
                  ? 'YAML'
                  : ext == 'json'
                      ? 'JSON'
                      : 'Other';
          languages[lang] = (languages[lang] ?? 0) + lines;
        }
      });
    }

    final html = StringBuffer('''
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>StyleHub Analysis Report</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: "Segoe UI", sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f4f6f9;
      color: #333;
    }
    h1 {
      margin-top: 0;
      color: #2c3e50;
    }
    .report-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 30px;
      flex-wrap: wrap;
    }
    .summary {
      flex: 1;
      background-color: #fff;
      padding: 15px 20px;
      border-left: 5px solid #3498db;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    #issueChart {
      max-width: 250px;
      max-height: 250px;
      margin-top: 5px;
    }
    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
      background-color: white;
      box-shadow: 0 0 5px rgba(0,0,0,0.05);
    }
    th, td {
      padding: 10px;
      border: 1px solid #ddd;
      font-size: 14px;
      text-align: left;
    }
    th {
      background-color: #ecf0f1;
      position: sticky;
      top: 0;
      z-index: 2;
    }
    tr:hover {
      background-color: #f1f1f1;
    }
    .severity-badge {
      display: inline-block;
      padding: 5px 10px;
      border-radius: 5px;
      font-weight: bold;
      font-size: 12px;
      color: white;
      text-transform: uppercase;
    }
    .error .severity-badge { background: #e74c3c; }
    .warning .severity-badge { background: #f39c12; }
    .info .severity-badge { background: #3498db; }
    .footer-note {
      margin-top: 20px;
      font-size: 12px;
      color: #888;
    }
  </style>
</head>
<body>
  <h1>StyleHub Code Analysis Report</h1>
  <div class="report-header">
    <div class="summary">
      <p><strong>Total Issues:</strong> ${issues.length}</p>
      <p><strong>Total Lines of Code:</strong> $totalLines</p>
      <p><strong>Languages Used:</strong> ${languages.keys.join(', ')}</p>
    </div>
    <canvas id="issueChart"></canvas>
  </div>

  <table>
    <tr>
      <th>Severity</th>
      <th>File</th>
      <th>Line</th>
      <th>Message</th>
      <th>Code</th>
    </tr>
''');

    for (var issue in issues) {
      final severity = (issue['severity'] ?? 'unknown').toString().toLowerCase();
      final file = issue['location']?['file'] ?? 'unknown';
      final line = issue['location']?['startLine'] ?? 'unknown';
      final message = issue['message'] ?? 'No message';
      final code = issue['code'] ?? 'unknown';
      final icon = severity == 'error' ? 'üõë' : severity == 'warning' ? '‚ö†Ô∏è' : severity == 'info' ? '‚ÑπÔ∏è' : '';

      html.writeln('''
    <tr class="$severity">
      <td><span class="severity-badge">$icon $severity</span></td>
      <td>$file</td>
      <td>$line</td>
      <td>$message</td>
      <td>$code</td>
    </tr>
''');
    }

    html.writeln('''
  </table>

  <div class="footer-note">
    Report generated using Flutter analyze and custom Dart script.
  </div>

  <script>
    const ctx = document.getElementById('issueChart');
    new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: ['Errors', 'Warnings', 'Info'],
        datasets: [{
          label: 'Issues',
          data: [$errorCount, $warningCount, $infoCount],
          backgroundColor: ['#e74c3c', '#f39c12', '#3498db'],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            position: 'bottom'
          }
        }
      }
    });
  </script>
</body>
</html>
''');

    Directory('analysis-report').createSync();
    File('analysis-report/index.html').writeAsStringSync(html.toString());

  } catch (e) {
    print('Error: \$e');
  }
}
EOF
          dart run generate_report.dart

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: analysis-report
          path: analysis-report/
